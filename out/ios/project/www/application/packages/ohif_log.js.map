)]}'
{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:log/main.js"],"names":["Meteor","module","watch","require","v","OHIF","loglevel","defaultLevel","isProduction","log","getLogger","setLevel","times","Map","time","key","givenKey","set","Date","getTime","timeEnd","now","last","get","delete","duration","info"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,QAAD,YAAQI,CAAR,EAAU;AAACJ,aAAOI,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,IAAJ;AAASJ,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACE,MAAD,YAAMD,CAAN,EAAQ;AAACC,WAAKD,CAAL;AAAO;AAAhB,CAAzC,EAA2D,CAA3D;AAA8D,IAAIE,QAAJ;AAAaL,OAAOC,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAAA,uBAASC,CAAT,EAAW;AAACE,eAASF,CAAT;AAAW;AAAvB,CAAjC,EAA0D,CAA1D;AAI9J,IAAMG,eAAeP,OAAOQ,YAAP,GAAsB,OAAtB,GAAgC,OAArD,C,CAEA;;AACAH,KAAKI,GAAL,GAAWH,SAASI,SAAT,CAAmB,MAAnB,CAAX;AACAL,KAAKI,GAAL,CAASE,QAAT,CAAkBJ,YAAlB,E,CAEA;;AACA,IAAMK,QAAQ,IAAIC,GAAJ,EAAd,C,CAEA;;AACAR,KAAKI,GAAL,CAASK,IAAT,GAAgB,oBAAY;AACxB,MAAMC,MAAM,OAAOC,QAAP,KAAoB,WAApB,GAAkC,SAAlC,GAA8CA,QAA1D;AACAJ,QAAMK,GAAN,CAAUF,GAAV,EAAe,IAAIG,IAAJ,GAAWC,OAAX,EAAf;AACH,CAHD,C,CAKA;;;AACAd,KAAKI,GAAL,CAASW,OAAT,GAAmB,oBAAY;AAC3B,MAAML,MAAM,OAAOC,QAAP,KAAoB,WAApB,GAAkC,SAAlC,GAA8CA,QAA1D;AACA,MAAMK,MAAM,IAAIH,IAAJ,GAAWC,OAAX,EAAZ;AACA,MAAMG,OAAOV,MAAMW,GAAN,CAAUR,GAAV,KAAkBM,GAA/B;AACAT,QAAMY,MAAN,CAAaT,GAAb;AACA,MAAMU,WAAWJ,MAAMC,IAAvB;AACAjB,OAAKI,GAAL,CAASiB,IAAT,CAAiBX,GAAjB,UAAyBU,QAAzB;AACH,CAPD,C","file":"/packages/ohif_log.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\nimport loglevel from 'loglevel';\n\nconst defaultLevel = Meteor.isProduction ? 'ERROR' : 'TRACE';\n\n// Create package logger using loglevel\nOHIF.log = loglevel.getLogger('OHIF');\nOHIF.log.setLevel(defaultLevel);\n\n// Add time and timeEnd to OHIF.log namespace\nconst times = new Map();\n\n// Register the time method\nOHIF.log.time = givenKey => {\n    const key = typeof givenKey === 'undefined' ? 'default' : givenKey;\n    times.set(key, new Date().getTime());\n};\n\n// Register the timeEnd method\nOHIF.log.timeEnd = givenKey => {\n    const key = typeof givenKey === 'undefined' ? 'default' : givenKey;\n    const now = new Date().getTime();\n    const last = times.get(key) || now;\n    times.delete(key);\n    const duration = now - last;\n    OHIF.log.info(`${key}: ${duration}ms`);\n};\n"]}