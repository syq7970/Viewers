)]}'
{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:studies/both/main.js","meteor://ðŸ’»app/packages/ohif:studies/client/main.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/components/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/components/browser/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/components/browser/item.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/components/browser/list.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/components/browser/quickSwitch.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/components/browser/series.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/components/browser/sidebar.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/lib/getStudyBoxData.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/lib/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/lib/loadStudy.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/lib/retrieveStudiesMetadata.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/lib/retrieveStudyMetadata.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/lib/searchStudies.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/lib/classes/OHIFStudyMetadataSource.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/lib/classes/OHIFStudySummary.js","meteor://ðŸ’»app/packages/ohif:studies/imports/client/lib/classes/index.js"],"names":["OHIF","module","watch","require","v","studies","Template","ReactiveVar","Tracker","$","_","studyBrowserItem","onCreated","instance","studyInformation","data","studyInstanceUid","loaded","loading","studyData","getStudyBoxData","then","get","set","studyMetadata","getStudyMetadata","dep","depend","study","viewer","Studies","findBy","viewerbase","metadata","StudyMetadata","autorun","loadingDict","firstInstance","getFirstInstance","studyDate","getRawValue","studyDescription","modalities","events","event","available","element","currentTarget","parentElement","$element","triggerClick","cloneEvent","clone","type","target","newEvent","Event","trigger","loadStudy","afterFlush","helpers","isLoaded","hasDescriptionAndDate","isLoading","modalitiesText","text","uniq","split","join","modalityStyle","numModalities","length","studyAvailable","studyBrowserList","studiesData","getStudiesInformation","studiesInformation","result","Map","forEach","item","Array","from","values","studyBrowserQuickSwitch","filter","studyInstanceUids","searchStudies","onRendered","currentStudy","$studyBrowserItems","removeClass","addClass","$studySwitch","closest","siblings","studyBrowserData","studyBrowserSeries","thumbnails","displaySets","sortingManager","getDisplaySets","setDisplaySets","forEachDisplaySet","stackManager","makeAndAddStack","displaySet","stack","thumbnailIndex","push","adjustMax","studyBrowserSidebar","toggleClass","ReactiveDict","Promise","resolve","reject","currentLoadingState","nonreactive","retrieveStudyMetadata","insert","StudyMetadataList","studyLoadingListener","StudyLoadingListener","getInstance","addStudy","catch","args","retrieveStudiesMetadata","seriesInstanceUids","promises","promise","all","log","warn","error","Meteor","StudyMetaDataPromises","has","seriesKeys","isArray","timingKey","time","call","timeEnd","errorType","errorMessage","seriesList","indexOf","series","seriesInstanceUid","window","HipaaLogger","user","logEvent","eventType","userId","userName","profile","fullName","collectionName","recordId","patientId","patientName","sortStudy","updateMetaDataManager","addDisplaySet","studySearchPromises","promiseKey","JSON","stringify","export","OHIFStudyMetadataSource","OHIFError","StudySummary","getByInstanceUID","studyInstanceUID","getStudyInstanceUID","alreadyLoaded","_updateStudyCollections","studyInfo","getData","selected","StudyMetadataSource","OHIFStudySummary","STRING","propertyReplacementMap","patientBirthdate","addTags","tagMap","_hasOwn","Object","prototype","hasOwnProperty","_tagMap","create","property","standardProperty","getStandardPropertyName","charAt","replace","toUpperCase","substr","classes"],"mappings":"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","file":"/packages/ohif_studies.js","sourcesContent":["import { OHIF } from 'meteor/ohif:core';\n\nOHIF.studies = {};\n\nrequire('../imports/both');\n","require('../imports/client');\n","import './components';\nimport './lib';\n","import './browser';\n","import './item.html';\nimport './item.js';\nimport './list.html';\nimport './list.js';\nimport './list.styl';\nimport './quickSwitch.html';\nimport './quickSwitch.js';\nimport './series.html';\nimport './series.js';\nimport './sidebar.html';\nimport './sidebar.js';\n","import { Template } from 'meteor/templating';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\nimport { $ } from 'meteor/jquery';\nimport { _ } from 'meteor/underscore';\nimport { OHIF } from 'meteor/ohif:core';\n\nTemplate.studyBrowserItem.onCreated(() => {\n    const instance = Template.instance();\n    const { studyInformation } = instance.data;\n    const { studyInstanceUid } = studyInformation;\n\n    instance.loaded = new ReactiveVar(false);\n    instance.loading = new ReactiveVar(false);\n\n    instance.studyData = new ReactiveVar(studyInformation);\n\n    // Try to load the study data from an external source if available\n    if (OHIF.studies.getStudyBoxData) {\n        OHIF.studies.getStudyBoxData(studyInformation).then(studyData => {\n            if (!instance.loaded.get()) {\n                instance.studyData.set(studyData);\n            }\n        });\n    }\n\n    instance.studyMetadata = null;\n    instance.getStudyMetadata = () => {\n        instance.loading.dep.depend();\n\n        if (!instance.studyMetadata) {\n            let study = OHIF.viewer.Studies.findBy({ studyInstanceUid }) || null;\n            if (study && !(study instanceof OHIF.viewerbase.metadata.StudyMetadata)) {\n                study = new OHIF.metadata.StudyMetadata(study, study.studyInstanceUid);\n            }\n\n            instance.studyMetadata = study;\n        }\n\n        return instance.studyMetadata;\n    };\n\n    instance.autorun(() => {\n        const instance = Template.instance();\n\n        OHIF.studies.loadingDict.get(studyInstanceUid);\n        const studyMetadata = instance.getStudyMetadata();\n        if (studyMetadata) {\n            const firstInstance = studyMetadata.getFirstInstance();\n            instance.studyData.set({\n                studyDate: firstInstance.getRawValue('x00080020') || '',\n                studyDescription: firstInstance.getRawValue('x00081030') || '',\n                modalities: firstInstance.getRawValue('x00080060') || '',\n            });\n\n            instance.loaded.set(true);\n            instance.loading.set(false);\n        }\n    });\n});\n\nTemplate.studyBrowserItem.events({\n    'click .study-item'(event, instance) {\n        if (instance.loading.get()) return;\n\n        const { studyInformation } = instance.data;\n\n        //  Skip if study is not available (set to false explicitly)\n        if (studyInformation.available === false) {\n            return;\n        }\n\n        const element = event.currentTarget.parentElement;\n        const $element = $(element);\n        const triggerClick = () => {\n            const cloneEvent = _.clone(event);\n            delete cloneEvent.type;\n            cloneEvent.currentTarget = cloneEvent.target = element;\n            const newEvent = $.Event('ohif.studies.study.click', cloneEvent);\n            $element.trigger(newEvent, studyInformation);\n        };\n\n        if (instance.loaded.get()) {\n            triggerClick();\n        } else {\n            instance.loading.set(true);\n            OHIF.studies.loadStudy(studyInformation.studyInstanceUid).then(() => {\n                instance.loaded.set(true);\n                instance.loading.set(false);\n                $element.trigger('ohif.studies.study.load', studyInformation);\n                Tracker.afterFlush(triggerClick);\n            });\n        }\n    }\n});\n\nTemplate.studyBrowserItem.helpers({\n    isLoaded() {\n        return Template.instance().loaded.get();\n    },\n\n    hasDescriptionAndDate() {\n        const studyData = Template.instance().studyData.get();\n        return studyData.studyDescription && studyData.studyDate;\n    },\n\n    isLoading() {\n        return Template.instance().loading.get();\n    },\n\n    modalitiesText(modalities) {\n        const text = modalities || 'UN';\n        return _.uniq(text.split(/[^A-Za-z]+/g)).join(' ');\n    },\n\n    modalityStyle(modalities) {\n        // Responsively styles the Modality Acronyms for studies with more than one modality\n        const numModalities = modalities ? modalities.split(/\\s/g).length : 1;\n\n        if (numModalities === 1) {\n            // If we have only one modality, it should take up the whole div\n            return 'font-size:1em';\n        } else if (numModalities === 2) {\n            // If we have two modalities, let them sit side-by-side\n            return 'font-size:0.7em';\n        } else {\n            // If we have more than two modalities, change the line height to display multiple rows\n            return 'font-size:0.7em;line-height:1.4em;padding-top:0.5em';\n        }\n    },\n\n    studyAvailable() {\n        const { studyInformation } = Template.instance().data;\n        if (!studyInformation) {\n            return;\n        }\n\n        return studyInformation.available;\n    }\n});\n","import { Template } from 'meteor/templating';\n\nTemplate.studyBrowserList.onCreated(() => {\n    const instance = Template.instance();\n\n    if (instance.data.studiesData) {\n        instance.studiesData = instance.data.studiesData;\n    }\n});\n\nTemplate.studyBrowserList.helpers({\n    getStudiesInformation() {\n        const instance = Template.instance();\n\n        let studiesInformation;\n        if (instance.studiesData) {\n            studiesInformation = instance.studiesData.get() || [];\n        } else {\n            studiesInformation = instance.data.studiesInformation || [];\n        }\n\n        const result = new Map();\n        studiesInformation.forEach(item => result.set(item.studyInstanceUid, item));\n        return Array.from(result.values());\n    }\n});\n","import { Template } from 'meteor/templating';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\nimport { OHIF } from 'meteor/ohif:core';\n\nTemplate.studyBrowserQuickSwitch.onCreated(() => {\n    const instance = Template.instance();\n    instance.studiesInformation = new ReactiveVar();\n    const filter = { studyInstanceUid: OHIF.viewer.data.studyInstanceUids };\n    OHIF.studies.searchStudies(filter).then(studies => instance.studiesInformation.set(studies));\n});\n\nTemplate.studyBrowserQuickSwitch.onRendered(() => {\n    const instance = Template.instance();\n    instance.autorun(() => {\n        instance.studiesInformation.dep.depend();\n        const currentStudy = instance.data.currentStudy.get();\n        const studyInstanceUid = (currentStudy && currentStudy.studyInstanceUid) || '';\n        Tracker.afterFlush(() => {\n            const $studyBrowserItems = instance.$('.study-browser-item');\n            $studyBrowserItems.removeClass('active');\n            $studyBrowserItems.filter(`[data-uid=\"${studyInstanceUid}\"]`).addClass('active');\n        });\n    });\n});\n\nTemplate.studyBrowserQuickSwitch.events({\n    'ohif.studies.study.click'(event, instance, studyInformation) {\n        const { studyInstanceUid } = studyInformation;\n        const study = OHIF.viewer.Studies.findBy({ studyInstanceUid });\n        instance.data.currentStudy.set(study);\n        const $studySwitch = $(event.currentTarget).closest('.study-switch');\n        $studySwitch.siblings('.series-switch').trigger('rescale');\n    }\n});\n\nTemplate.studyBrowserQuickSwitch.helpers({\n    studyBrowserData() {\n        const instance = Template.instance();\n        const studiesInformation = instance.studiesInformation.get();\n        return { studiesInformation };\n    }\n});\n","import { Template } from 'meteor/templating';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\nimport { OHIF } from 'meteor/ohif:core';\n\nTemplate.studyBrowserSeries.onCreated(() => {\n    const instance = Template.instance();\n    const { studyInformation, studyMetadata } = instance.data;\n    const studyInstanceUid = (studyMetadata && studyMetadata.studyInstanceUid) || (studyInformation && studyInformation.studyInstanceUid);\n\n    instance.thumbnails = new ReactiveVar([]);\n\n    // Get the study metadata and update the study thumbnails\n    instance.autorun(() => {\n        let metadata = studyMetadata;\n\n        // Check for reactivity\n        if (metadata instanceof ReactiveVar) {\n            metadata = metadata.get();\n        }\n\n        // Retrieve the study metadata\n        if (!metadata) {\n            metadata = OHIF.viewer.Studies.findBy({ studyInstanceUid });\n        }\n\n        // Stop here if there's no study metadata\n        if (!metadata) return;\n\n        // Get the study display sets\n        let displaySets = metadata.displaySets;\n        if (!displaySets.length) {\n            displaySets = OHIF.viewerbase.sortingManager.getDisplaySets(metadata);\n            metadata.displaySets = displaySets;\n            metadata.setDisplaySets(displaySets);\n\n            metadata.forEachDisplaySet(displaySet => {\n                OHIF.viewerbase.stackManager.makeAndAddStack(metadata, displaySet);\n            });\n        }\n\n        // Defines the resulting thumbnails list\n        const thumbnails = [];\n        displaySets.forEach((stack, thumbnailIndex) => {\n            thumbnails.push({\n                thumbnailIndex,\n                stack\n            });\n        });\n\n        instance.thumbnails.set(thumbnails);\n    });\n});\n\nTemplate.studyBrowserSeries.onRendered(() => {\n    const instance = Template.instance();\n\n    // Run this computation every time the thumbnails are changed\n    instance.autorun(() => {\n        instance.thumbnails.get();\n        Tracker.afterFlush(() => {\n            instance.$('.study-browser-series').adjustMax('height');\n        });\n    });\n});\n","import { Template } from 'meteor/templating';\n\nTemplate.studyBrowserSidebar.events({\n    'ohif.studies.study.click'(event, instance) {\n        const $element = $(event.currentTarget);\n\n        // Remove active class from sibling studies\n        $element.siblings().removeClass('active');\n\n        // Toggle the active class on clicked study\n        $element.toggleClass('active');\n    }\n});\n","import { OHIF } from 'meteor/ohif:core';\n\n/**\n * Overridable namespace to allow getting study boxes data externally.\n *\n * The function must handle the first parameter as a studyInformation object containing at least the\n * studyInstanceUid attribute.\n *\n * Shall return a promise that will be resolved with an object containing those attributes:\n * - studyInstanceUid {String}: copy of studyInformation.studyInstanceUid\n * - modalities {String}: 2 uppercase letters for each modality split by any non-alphabetical char(s)\n * - studyDate {String}: date formatted as YYYYMMDD\n * - studyDescription {String}: study description string\n */\nOHIF.studies.getStudyBoxData = false;\n","import './classes';\nimport './getStudyBoxData';\nimport './loadStudy';\nimport './retrieveStudiesMetadata';\nimport './retrieveStudyMetadata';\nimport './searchStudies';\n","import { ReactiveDict } from 'meteor/reactive-dict';\nimport { Tracker } from 'meteor/tracker';\nimport { OHIF } from 'meteor/ohif:core';\n\n// Create a studies loaded state dictionary to enable reactivity. Values: loading|loaded|failed\nOHIF.studies.loadingDict = new ReactiveDict();\n\n/**\n * Load the study metadata and store its information locally\n *\n * @param {String} studyInstanceUid The UID of the Study to be loaded\n * @returns {Promise} that will be resolved with the study metadata or rejected with an error\n */\nOHIF.studies.loadStudy = studyInstanceUid => new Promise((resolve, reject) => {\n    // Disable reactivity to get the current loading state\n    let currentLoadingState;\n    Tracker.nonreactive(() => {\n        currentLoadingState = OHIF.studies.loadingDict.get(studyInstanceUid) || '';\n    });\n\n    // Set the loading state as the study is not yet loaded\n    if (currentLoadingState !== 'loading') {\n        OHIF.studies.loadingDict.set(studyInstanceUid, 'loading');\n    }\n\n    return OHIF.studies.retrieveStudyMetadata(studyInstanceUid).then(study => {\n        // Add the display sets to the study if not present\n        if (!study.displaySets) {\n            const displaySets = OHIF.viewerbase.sortingManager.getDisplaySets(study);\n            study.displaySets = displaySets;\n            study.setDisplaySets(displaySets);\n            study.forEachDisplaySet(displaySet => {\n                OHIF.viewerbase.stackManager.makeAndAddStack(study, displaySet);\n            });\n        }\n\n        // Double check to make sure this study wasn't already inserted into OHIF.viewer.Studies\n        // so we don't cause duplicate entry errors\n        const loaded = OHIF.viewer.Studies.findBy({ studyInstanceUid: study.studyInstanceUid });\n        if (!loaded) {\n            OHIF.viewer.Studies.insert(study);\n            OHIF.viewer.StudyMetadataList.insert(study);\n        }\n\n        // Add the study to the loading listener to allow loading progress handling\n        const studyLoadingListener = OHIF.viewerbase.StudyLoadingListener.getInstance();\n        studyLoadingListener.addStudy(study);\n\n        // Add the studyInstanceUid to the loaded state dictionary\n        OHIF.studies.loadingDict.set(studyInstanceUid, 'loaded');\n\n        resolve(study);\n    }).catch((...args) => {\n        OHIF.studies.loadingDict.set(studyInstanceUid, 'failed');\n        reject(args);\n    });\n});\n","import { OHIF } from 'meteor/ohif:core';\n\n/**\n * Retrieves metaData for multiple studies at once.\n *\n * This function calls retrieveStudyMetadata several times, asynchronously,\n * and waits for all of the results to be returned.\n *\n * @param studyInstanceUids The UIDs of the Studies to be retrieved\n * @return Promise\n */\nOHIF.studies.retrieveStudiesMetadata = (studyInstanceUids, seriesInstanceUids) => {\n    // Create an empty array to store the Promises for each metaData retrieval call\n    const promises = [];\n\n    // Loop through the array of studyInstanceUids\n    studyInstanceUids.forEach(function(studyInstanceUid) {\n        // Send the call and resolve or reject the related promise based on its outcome\n        const promise = OHIF.studies.retrieveStudyMetadata(studyInstanceUid, seriesInstanceUids);\n\n        // Add the current promise to the array of promises\n        promises.push(promise);\n    });\n\n    // When all of the promises are complete, this callback runs\n    const promise = Promise.all(promises);\n\n    // Warn the error on console if some retrieval failed\n    promise.catch(error => OHIF.log.warn(error));\n\n    return promise;\n};\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\nimport 'meteor/ohif:viewerbase';\n\n// Define the StudyMetaDataPromises object. This is used as a cache to store study meta data\n// promises and prevent unnecessary subsequent calls to the server\nconst StudyMetaDataPromises = new Map();\n\n/**\n * Retrieves study metadata using a server call\n *\n * @param {String} studyInstanceUid The UID of the Study to be retrieved\n * @returns {Promise} that will be resolved with the metadata or rejected with the error\n */\nOHIF.studies.retrieveStudyMetadata = (studyInstanceUid, seriesInstanceUids) => {\n\n    // @TODO: Whenever a study metadata request has failed, its related promise will be rejected once and for all\n    // and further requests for that metadata will always fail. On failure, we probably need to remove the\n    // corresponding promise from the \"StudyMetaDataPromises\" map...\n\n    // If the StudyMetaDataPromises cache already has a pending or resolved promise related to the\n    // given studyInstanceUid, then that promise is returned\n    if (StudyMetaDataPromises.has(studyInstanceUid)) {\n        return StudyMetaDataPromises.get(studyInstanceUid);\n    }\n\n    const seriesKeys = Array.isArray(seriesInstanceUids) ? '|' + seriesInstanceUids.join('|') : '';\n    const timingKey = `retrieveStudyMetadata[${studyInstanceUid}${seriesKeys}]`;\n    OHIF.log.time(timingKey);\n\n    // Create a promise to handle the data retrieval\n    const promise = new Promise((resolve, reject) => {\n        // If no study metadata is in the cache variable, we need to retrieve it from\n        // the server with a call.\n        Meteor.call('GetStudyMetadata', studyInstanceUid, function(error, study) {\n            OHIF.log.timeEnd(timingKey);\n\n            if (error) {\n                const errorType = error.error;\n                let errorMessage = '';\n\n                if (errorType === 'server-connection-error') {\n                    errorMessage = 'There was an error connecting to the DICOM server, please verify if it is up and running.';\n                } else if (errorType === 'server-internal-error') {\n                    errorMessage = `There was an internal error with the DICOM server getting metadeta for ${studyInstanceUid}`;\n                } else {\n                    errorMessage = `For some reason we could not retrieve the study\\'s metadata for ${studyInstanceUid}.`;\n                }\n\n                OHIF.log.error(errorMessage);\n                OHIF.log.error(error.stack);\n                reject(`GetStudyMetadata: ${errorMessage}`);\n                return;\n            }\n\n            // Filter series if seriesInstanceUid exists\n            if (seriesInstanceUids && seriesInstanceUids.length) {\n                study.seriesList = study.seriesList.filter(series => seriesInstanceUids.indexOf(series.seriesInstanceUid) > -1);\n            }\n\n            if (!study) {\n                reject(`GetStudyMetadata: No study data returned from server: ${studyInstanceUid}`);\n                return;\n            }\n\n            if (window.HipaaLogger && Meteor.user && Meteor.user()) {\n                window.HipaaLogger.logEvent({\n                    eventType: 'viewed',\n                    userId: Meteor.userId(),\n                    userName: Meteor.user().profile.fullName,\n                    collectionName: 'Study',\n                    recordId: studyInstanceUid,\n                    patientId: study.patientId,\n                    patientName: study.patientName\n                });\n            }\n\n            // Once the data was retrieved, the series are sorted by series and instance number\n            OHIF.viewerbase.sortStudy(study);\n\n            // Updates WADO-RS metaDataManager\n            OHIF.viewerbase.updateMetaDataManager(study);\n\n            // Transform the study in a StudyMetadata object\n            const studyMetadata = new OHIF.metadata.StudyMetadata(study);\n\n            // Add the display sets to the study\n            study.displaySets = OHIF.viewerbase.sortingManager.getDisplaySets(studyMetadata);\n            study.displaySets.forEach(displaySet => {\n                OHIF.viewerbase.stackManager.makeAndAddStack(study, displaySet);\n                studyMetadata.addDisplaySet(displaySet);\n            });\n\n            // Resolve the promise with the final study metadata object\n            resolve(study);\n        });\n    });\n\n    // Store the promise in cache\n    StudyMetaDataPromises.set(studyInstanceUid, promise);\n\n    return promise;\n};\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\n\nconst studySearchPromises = new Map();\n\n/**\n * Search for studies information by the given filter\n *\n * @param {Object} filter Filter that will be used on search\n * @returns {Promise} resolved with an array of studies information or rejected with an error\n */\nOHIF.studies.searchStudies = filter => {\n    const promiseKey = JSON.stringify(filter);\n    if (studySearchPromises.has(promiseKey)) {\n        return studySearchPromises.get(promiseKey);\n    } else {\n        const promise = new Promise((resolve, reject) => {\n            Meteor.call('StudyListSearch', filter, (error, studiesData) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(studiesData);\n                }\n            });\n        });\n        studySearchPromises.set(promiseKey, promise);\n        return promise;\n    }\n};\n","import { OHIF } from 'meteor/ohif:core';\nimport 'meteor/ohif:viewerbase';\n\n// Important metadata classes\nconst { OHIFError, metadata } = OHIF.viewerbase;\nconst { StudySummary, StudyMetadata } = metadata;\n\nexport class OHIFStudyMetadataSource extends OHIF.viewerbase.StudyMetadataSource {\n\n    /**\n     * Get study metadata for a study with given study InstanceUID\n     * @param  {String} studyInstanceUID Study InstanceUID\n     * @return {Promise} A Promise object\n     */\n    getByInstanceUID(studyInstanceUID) {\n        return OHIF.studies.retrieveStudyMetadata(studyInstanceUID);\n    }\n\n    /**\n     * Load study info (OHIF.viewer.Studies) and study metadata (OHIF.viewer.StudyMetadataList) for a given study.\n     * @param {StudySummary|StudyMetadata} study of StudySummary or StudyMetadata object.\n     */\n    loadStudy(study) {\n        if (!(study instanceof StudyMetadata) && !(study instanceof StudySummary)) {\n            throw new OHIFError('OHIFStudyMetadataSource::loadStudy study is not an instance of StudySummary or StudyMetadata');\n        }\n\n        return new Promise((resolve, reject) => {\n            const studyInstanceUID = study.getStudyInstanceUID();\n\n            if (study instanceof StudyMetadata) {\n                const alreadyLoaded = OHIF.viewer.Studies.findBy({\n                    studyInstanceUid: studyInstanceUID\n                });\n\n                if (!alreadyLoaded) {\n                    OHIFStudyMetadataSource._updateStudyCollections(study);\n                }\n\n                resolve(study);\n                return;\n            }\n\n            this.getByInstanceUID(studyInstanceUID).then(studyInfo => {\n                // Create study metadata object\n                const studyMetadata = new OHIF.metadata.StudyMetadata(studyInfo, studyInfo.studyInstanceUid);\n\n                // Get Study display sets\n                const displaySets = OHIF.viewerbase.sortingManager.getDisplaySets(studyMetadata);\n\n                // Set studyMetadata display sets\n                studyMetadata.setDisplaySets(displaySets);\n\n                OHIFStudyMetadataSource._updateStudyCollections(studyMetadata);\n                resolve(studyMetadata);\n            }).catch(reject);\n        });\n    }\n\n    // Static methods\n    static _updateStudyCollections(studyMetadata) {\n        const studyInfo = studyMetadata.getData();\n\n        // Set some studyInfo properties\n        studyInfo.selected = true;\n        studyInfo.displaySets = studyMetadata.getDisplaySets();\n\n        // Insert new study info object in Studies TypeSafeCollection\n        OHIF.viewer.Studies.insert(studyInfo);\n\n        // Insert new study metadata in StudyMetadataList TypeSafeCollection\n        OHIF.viewer.StudyMetadataList.insert(studyMetadata);\n    }\n\n}\n","import { OHIF } from 'meteor/ohif:core';\nimport 'meteor/ohif:viewerbase';\n\n/**\n * Constants\n */\n\nconst STRING = 'string';\nconst propertyReplacementMap = {\n    modalities: 'ModalitiesInStudy',\n    patientBirthdate: 'PatientBirthDate'\n};\n\n/**\n * OHIF Viewers specialized version of StudySummary class\n */\nexport class OHIFStudySummary extends OHIF.viewerbase.metadata.StudySummary {\n\n    // @Override\n    addTags(tagMap) {\n        const _hasOwn = Object.prototype.hasOwnProperty;\n        const _tagMap = Object.create(null);\n        for (let property in tagMap) {\n            if (_hasOwn.call(tagMap, property)) {\n                let standardProperty = OHIFStudySummary.getStandardPropertyName(property);\n                if (standardProperty) {\n                    _tagMap[standardProperty] = tagMap[property];\n                }\n            }\n        }\n        super.addTags(_tagMap);\n    }\n\n    /**\n     * Turns a non-standard, OHIF specific, DICOM property name into a standard one.\n     * @param {string} property A string representing a non-conforming keyword.\n     * @returns {string|undefined} Returns a standard-conforming property name.\n     */\n    static getStandardPropertyName(property) {\n        let standardProperty;\n        if (typeof property === STRING && property.charAt(0) !== '_') {\n            if (property in propertyReplacementMap) {\n                standardProperty = propertyReplacementMap[propertyReplacementMap];\n            } else {\n                standardProperty = property.replace(/^sop/, 'SOP').replace(/Uid$/, 'UID').replace(/Id$/, 'ID');\n                standardProperty = standardProperty.charAt(0).toUpperCase() + standardProperty.substr(1);\n            }\n        }\n        return standardProperty;\n    }\n\n}\n","import { OHIF } from 'meteor/ohif:core';\nimport { OHIFStudyMetadataSource } from './OHIFStudyMetadataSource';\nimport { OHIFStudySummary } from './OHIFStudySummary';\n\nOHIF.studies.classes = {\n    OHIFStudyMetadataSource,\n    OHIFStudySummary\n};\n"]}