)]}'
{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:cornerstone-settings/client/main.js","meteor://ðŸ’»app/packages/ohif:cornerstone-settings/imports/client/index.js","meteor://ðŸ’»app/packages/ohif:cornerstone-settings/imports/client/renderer.js","meteor://ðŸ’»app/packages/ohif:cornerstone-settings/imports/client/lib/parsingUtils.js","meteor://ðŸ’»app/packages/ohif:cornerstone-settings/imports/client/lib/classes/MetadataProvider.js"],"names":["require","OHIF","module","watch","v","MetadataProvider","cornerstone","metadataProvider","Meteor","rendererPath","renderer","utils","ObjectPath","get","export","parsingUtils","dicomParser","isValidDataSet","data","DataSet","attributeTag","tag","elements","element","length","parser","byteArrayParser","readUint16","bytes","byteArray","offset","dataOffset","toString","substr","multiValue","string","readFixedString","split","map","value","trim","floatArray","parseFloat","cornerstoneMath","FUNCTION","Object","defineProperty","configurable","enumerable","writable","Map","addMetadata","imageId","instanceMetadata","instance","seriesMetadata","series","studyMetadata","study","numImages","metadata","accessionNumber","patientId","studyInstanceUid","studyDate","studyTime","studyDescription","institutionName","patientHistory","seriesDescription","seriesNumber","seriesDate","seriesTime","modality","seriesInstanceUid","patient","name","patientName","id","birthDate","patientBirthDate","sex","patientSex","age","patientAge","imagePlane","getImagePlane","metadataLookup","set","getMetadata","addSpecificMetadata","type","oldMetadata","assign","getFromImage","image","attrName","defaultValue","getFromDataSet","dataSet","fn","call","getFrameIncrementPointer","frameInstancePointer","frameInstancePointerNames","x00181063","x00181065","frameInstancePointerTag","frameIncrementPointer","getFrameTimeVector","frameTimeVector","getFrameTime","floatString","frameTime","updateMetadata","imageMetadata","rows","columns","sopClassUid","sopInstanceUid","pixelSpacing","frameOfReferenceUID","imageOrientationPatient","imagePositionPatient","sliceThickness","sliceLocation","tablePosition","spacingBetweenSlices","lossyImageCompression","lossyImageCompressionRatio","multiframeMetadata","getMultiframeModuleMetadata","imageOrientation","imagePosition","columnPixelSpacing","rowPixelSpacing","rowCosines","Vector3","columnCosines","imageInfo","isMultiframeImage","numberOfFrames","averageFrameRate","Array","reduce","a","b","getProvider","provider","_provider","bind","hasOwnProperty"],"mappings":"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","file":"/packages/ohif_cornerstone-settings.js","sourcesContent":["// Include cornerstone's settings imports\nrequire('../imports/client');\n","import { OHIF } from 'meteor/ohif:core';\n\nimport './renderer.js';\n\nimport { MetadataProvider } from './lib/classes/MetadataProvider';\nOHIF.cornerstone.MetadataProvider = MetadataProvider;\n\n// TODO: Remove this after all viewers are updated to create an instance of OHIF.cornerstone.MetadataProvider\nOHIF.cornerstone.metadataProvider = new MetadataProvider();\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\n\nconst rendererPath = 'settings.public.ui.cornerstoneRenderer';\nOHIF.cornerstone.renderer = OHIF.utils.ObjectPath.get(Meteor, rendererPath) || '';\n","import { dicomParser } from 'meteor/ohif:cornerstone';\n\n/**\n * A small set of utilities to help parsing DICOM element values.\n * In the future the functionality provided by this library might\n * be incorporated into dicomParser library.\n */\n\nexport const parsingUtils = {\n\n    /**\n     * Check if supplied argument is a valid instance of the dicomParser.DataSet class.\n     * @param data {Object} An instance of the dicomParser.DataSet class.\n     * @returns {Boolean} Returns true if data is a valid instance of the dicomParser.DataSet class.\n     */\n    isValidDataSet: function(data) {\n        return (data instanceof dicomParser.DataSet);\n    },\n\n    /**\n     * Parses an element tag according to the 'AT' VR definition.\n     * @param data {Object} An instance of the dicomParser.DataSet class.\n     * @param tag {String} A DICOM tag with in the format xGGGGEEEE.\n     * @returns {String} A string representation of a data element tag or null if the field is not present or data is not long enough.\n     */\n    attributeTag: function(data, tag) {\n        if (this.isValidDataSet(data) && tag in data.elements) {\n            let element = data.elements[tag];\n            if (element && element.length === 4) {\n                let parser = data.byteArrayParser.readUint16,\n                    bytes = data.byteArray,\n                    offset = element.dataOffset;\n                return 'x' + ('00000000' + (parser(bytes, offset) * 256 * 256 + parser(bytes, offset + 2)).toString(16)).substr(-8);\n            }\n        }\n\n        return null;\n    },\n\n    /**\n     * Parses the string representation of a multi-valued element into an array of strings. If the parser\n     * parameter is passed and is a function, it will be applied to each element of the resulting array.\n     * @param data {Object} An instance of the dicomParser.DataSet class.\n     * @param tag {String} A DICOM tag with in the format xGGGGEEEE.\n     * @param parser {Function} An optional parser function that can be applied to each element of the array.\n     * @returns {Array} An array of floating point numbers or null if the field is not present or data is not long enough.\n     */\n    multiValue: function(data, tag, parser) {\n        if (this.isValidDataSet(data) && tag in data.elements) {\n            let element = data.elements[tag];\n            if (element && element.length > 0) {\n                let string = dicomParser.readFixedString(data.byteArray, element.dataOffset, element.length);\n                if (typeof string === 'string' && string.length > 0) {\n                    if (typeof parser !== 'function') {\n                        parser = null;\n                    }\n\n                    return string.split('\\\\').map(function(value) {\n                        value = value.trim();\n                        return parser !== null ? parser(value) : value;\n                    });\n                }\n            }\n        }\n\n        return null;\n    },\n\n    /**\n     * Parses a string to an array of floats for a multi-valued element.\n     * @param data {Object} An instance of the dicomParser.DataSet class.\n     * @param tag {String} A DICOM tag with in the format xGGGGEEEE.\n     * @returns {Array} An array of floating point numbers or null if the field is not present or data is not long enough.\n     */\n    floatArray: function(data, tag) {\n        return this.multiValue(data, tag, parseFloat);\n    }\n\n};\n","import { cornerstoneMath } from 'meteor/ohif:cornerstone';\nimport { parsingUtils } from '../parsingUtils';\n\nconst FUNCTION = 'function';\n\nexport class MetadataProvider {\n\n    constructor() {\n\n        // Define the main \"metadataLookup\" private property as an immutable property.\n        Object.defineProperty(this, 'metadataLookup', {\n            configurable: false,\n            enumerable: false,\n            writable: false,\n            value: new Map()\n        });\n\n        // Local reference to provider function bound to current instance.\n        Object.defineProperty(this, '_provider', {\n            configurable: false,\n            enumerable: false,\n            writable: true,\n            value: null\n        });\n\n    }\n\n    /**\n     * Cornerstone Metadata provider to store image meta data\n     * Data from instances, series, and studies are associated with\n     * imageIds to facilitate usage of this information by Cornerstone's Tools\n     *\n     * e.g. the imagePlane metadata object contains instance information about\n     * row/column pixel spacing, patient position, and patient orientation. It\n     * is used in CornerstoneTools to position reference lines and orientation markers.\n     *\n     * @param {String} imageId The Cornerstone ImageId\n     * @param {Object} data An object containing instance, series, and study metadata\n     */\n    addMetadata(imageId, data) {\n        const instanceMetadata = data.instance;\n        const seriesMetadata = data.series;\n        const studyMetadata = data.study;\n        const numImages = data.numImages;\n\n        const metadata = {};\n\n        metadata.study = {\n            accessionNumber: studyMetadata.accessionNumber,\n            patientId: studyMetadata.patientId,\n            studyInstanceUid: studyMetadata.studyInstanceUid,\n            studyDate: studyMetadata.studyDate,\n            studyTime: studyMetadata.studyTime,\n            studyDescription: studyMetadata.studyDescription,\n            institutionName: studyMetadata.institutionName,\n            patientHistory: studyMetadata.patientHistory\n        };\n\n        metadata.series = {\n            seriesDescription: seriesMetadata.seriesDescription,\n            seriesNumber: seriesMetadata.seriesNumber,\n            seriesDate: seriesMetadata.seriesDate,\n            seriesTime: seriesMetadata.seriesTime,\n            modality: seriesMetadata.modality,\n            seriesInstanceUid: seriesMetadata.seriesInstanceUid,\n            numImages: numImages\n        };\n\n        metadata.instance = instanceMetadata;\n\n        metadata.patient = {\n            name: studyMetadata.patientName,\n            id: studyMetadata.patientId,\n            birthDate: studyMetadata.patientBirthDate,\n            sex: studyMetadata.patientSex,\n            age: studyMetadata.patientAge\n        };\n\n        // If there is sufficient information, populate\n        // the imagePlane object for easier use in the Viewer\n        metadata.imagePlane = this.getImagePlane(instanceMetadata);\n\n        // Add the metadata to the imageId lookup object\n        this.metadataLookup.set(imageId, metadata);\n    }\n\n    /**\n     * Return the metadata for the given imageId\n     * @param {String} imageId The Cornerstone ImageId\n     * @returns image metadata\n     */\n    getMetadata(imageId) {\n        return this.metadataLookup.get(imageId);\n    }\n\n    /**\n     * Adds a set of metadata to the Cornerstone metadata provider given a specific\n     * imageId, type, and dataset\n     *\n     * @param imageId\n     * @param type (e.g. series, instance, tagDisplay)\n     * @param data\n     */\n    addSpecificMetadata(imageId, type, data) {\n        const metadata = {};\n        metadata[type] = data;\n\n        const oldMetadata = this.metadataLookup.get(imageId);\n        this.metadataLookup.set(imageId, Object.assign(oldMetadata, metadata));\n    }\n\n    getFromImage(image, type, tag, attrName, defaultValue) {\n        let value;\n\n        if (image.data) {\n            value = this.getFromDataSet(image.data, type, tag);\n        } else {\n            value = image.instance[attrName];\n        }\n\n        return value == null ? defaultValue : value;\n    }\n\n    getFromDataSet(dataSet, type, tag) {\n        if (!dataSet) {\n            return;\n        }\n\n        const fn = dataSet[type];\n        if (!fn) {\n            return;\n        }\n\n        return fn.call(dataSet, tag);\n    }\n\n    getFrameIncrementPointer(image) {\n        const dataSet = image.data;\n        let frameInstancePointer = '';\n\n        if (parsingUtils.isValidDataSet(dataSet)) {\n            const frameInstancePointerNames = {\n                x00181063: 'frameTime',\n                x00181065: 'frameTimeVector'\n            };\n\n            // (0028,0009) = Frame Increment Pointer\n            const frameInstancePointerTag = parsingUtils.attributeTag(dataSet, 'x00280009');\n            frameInstancePointer = frameInstancePointerNames[frameInstancePointerTag];\n        } else {\n            frameInstancePointer = image.instance.frameIncrementPointer;\n        }\n\n        return frameInstancePointer || '';\n    }\n\n    getFrameTimeVector(image) {\n        const dataSet = image.data;\n\n        if (parsingUtils.isValidDataSet(dataSet)) {\n            // Frame Increment Pointer points to Frame Time Vector (0018,1065) field\n            return parsingUtils.floatArray(dataSet, 'x00181065');\n        }\n\n        return image.instance.frameTimeVector;\n    }\n\n    getFrameTime(image) {\n        const dataSet = image.data;\n\n        if (parsingUtils.isValidDataSet(dataSet)) {\n            // Frame Increment Pointer points to Frame Time (0018,1063) field or is not defined (for addtional flexibility).\n            // Yet another value is possible for this field (5200,9230 for Multi-frame Functional Groups)\n            // but that case is currently not supported.\n            return dataSet.floatString('x00181063', -1);\n        }\n\n        return image.instance.frameTime;\n    }\n\n    /**\n     * Updates the related metadata for missing fields given a specified image\n     *\n     * @param image\n     */\n    updateMetadata(image) {\n        const imageMetadata = this.metadataLookup.get(image.imageId);\n        if (!imageMetadata) {\n            return;\n        }\n\n        imageMetadata.patient.age = imageMetadata.patient.age || this.getFromDataSet(image.data, 'string', 'x00101010');\n\n        imageMetadata.instance.rows = imageMetadata.instance.rows || image.rows;\n        imageMetadata.instance.columns = imageMetadata.instance.columns || image.columns;\n\n        imageMetadata.instance.sopClassUid = imageMetadata.instance.sopClassUid || this.getFromDataSet(image.data, 'string', 'x00080016');\n        imageMetadata.instance.sopInstanceUid = imageMetadata.instance.sopInstanceUid || this.getFromDataSet(image.data, 'string', 'x00080018');\n\n        imageMetadata.instance.pixelSpacing = imageMetadata.instance.pixelSpacing || this.getFromDataSet(image.data, 'string', 'x00280030');\n        imageMetadata.instance.frameOfReferenceUID = imageMetadata.instance.frameOfReferenceUID || this.getFromDataSet(image.data, 'string', 'x00200052');\n        imageMetadata.instance.imageOrientationPatient = imageMetadata.instance.imageOrientationPatient || this.getFromDataSet(image.data, 'string', 'x00200037');\n        imageMetadata.instance.imagePositionPatient = imageMetadata.instance.imagePositionPatient || this.getFromDataSet(image.data, 'string', 'x00200032');\n\n        imageMetadata.instance.sliceThickness = imageMetadata.instance.sliceThickness || this.getFromDataSet(image.data, 'string', 'x00180050');\n        imageMetadata.instance.sliceLocation = imageMetadata.instance.sliceLocation || this.getFromDataSet(image.data, 'string', 'x00201041');\n        imageMetadata.instance.tablePosition = imageMetadata.instance.tablePosition || this.getFromDataSet(image.data, 'string', 'x00189327');\n        imageMetadata.instance.spacingBetweenSlices = imageMetadata.instance.spacingBetweenSlices || this.getFromDataSet(image.data, 'string', 'x00180088');\n\n        imageMetadata.instance.lossyImageCompression = imageMetadata.instance.lossyImageCompression || this.getFromDataSet(image.data, 'string', 'x00282110');\n        imageMetadata.instance.lossyImageCompressionRatio = imageMetadata.instance.lossyImageCompressionRatio || this.getFromDataSet(image.data, 'string', 'x00282112');\n\n        imageMetadata.instance.frameIncrementPointer = imageMetadata.instance.frameIncrementPointer || this.getFromDataSet(image.data, 'string', 'x00280009');\n        imageMetadata.instance.frameTime = imageMetadata.instance.frameTime || this.getFromDataSet(image.data, 'string', 'x00181063');\n        imageMetadata.instance.frameTimeVector = imageMetadata.instance.frameTimeVector || this.getFromDataSet(image.data, 'string', 'x00181065');\n\n        if ((image.data || image.instance) && !imageMetadata.instance.multiframeMetadata) {\n            imageMetadata.instance.multiframeMetadata = this.getMultiframeModuleMetadata(image);\n        }\n\n        imageMetadata.imagePlane = imageMetadata.imagePlane || this.getImagePlane(imageMetadata.instance);\n    }\n\n    /**\n     * Constructs and returns the imagePlane given the metadata instance\n     *\n     * @param metadataInstance The metadata instance (InstanceMetadata class) containing information to construct imagePlane\n     * @returns imagePlane The constructed imagePlane to be used in viewer easily\n     */\n    getImagePlane(instance) {\n        if (!instance.rows || !instance.columns || !instance.pixelSpacing ||\n            !instance.frameOfReferenceUID || !instance.imageOrientationPatient ||\n            !instance.imagePositionPatient) {\n            return;\n        }\n\n        const imageOrientation = instance.imageOrientationPatient.split('\\\\');\n        const imagePosition = instance.imagePositionPatient.split('\\\\');\n\n        let columnPixelSpacing = 1.0;\n        let rowPixelSpacing = 1.0;\n        if (instance.pixelSpacing) {\n            const split = instance.pixelSpacing.split('\\\\');\n            rowPixelSpacing = parseFloat(split[0]);\n            columnPixelSpacing = parseFloat(split[1]);\n        }\n\n        return {\n            frameOfReferenceUID: instance.frameOfReferenceUID,\n            rows: instance.rows,\n            columns: instance.columns,\n            rowCosines:\n                new cornerstoneMath.Vector3(parseFloat(imageOrientation[0]), parseFloat(imageOrientation[1]), parseFloat(imageOrientation[2])),\n            columnCosines:\n                new cornerstoneMath.Vector3(parseFloat(imageOrientation[3]), parseFloat(imageOrientation[4]), parseFloat(imageOrientation[5])),\n            imagePositionPatient:\n                new cornerstoneMath.Vector3(parseFloat(imagePosition[0]), parseFloat(imagePosition[1]), parseFloat(imagePosition[2])),\n            rowPixelSpacing,\n            columnPixelSpacing,\n        };\n    }\n\n    /**\n     * This function extracts miltiframe information from a dicomParser.DataSet object.\n     *\n     * @param dataSet {Object} An instance of dicomParser.DataSet object where multiframe information can be found.\n     * @return {Object} An object containing multiframe image metadata (frameIncrementPointer, frameTime, frameTimeVector, etc).\n     */\n    getMultiframeModuleMetadata(image) {\n        const imageInfo = {\n            isMultiframeImage: false,\n            frameIncrementPointer: null,\n            numberOfFrames: 0,\n            frameTime: 0,\n            frameTimeVector: null,\n            averageFrameRate: 0 // backwards compatibility only... it might be useless in the future\n        };\n\n        let frameTime;\n\n        const numberOfFrames = this.getFromImage(image, 'intString', 'x00280008', 'numberOfFrames', -1);\n\n        if (numberOfFrames > 0) {\n            // set multi-frame image indicator\n            imageInfo.isMultiframeImage = true;\n            imageInfo.numberOfFrames = numberOfFrames;\n\n            // (0028,0009) = Frame Increment Pointer\n            const frameIncrementPointer = this.getFrameIncrementPointer(image);\n\n            if (frameIncrementPointer === 'frameTimeVector') {\n                // Frame Increment Pointer points to Frame Time Vector (0018,1065) field\n                const frameTimeVector = this.getFrameTimeVector(image);\n\n                if (frameTimeVector instanceof Array && frameTimeVector.length > 0) {\n                    imageInfo.frameIncrementPointer = frameIncrementPointer;\n                    imageInfo.frameTimeVector = frameTimeVector;\n                    frameTime = frameTimeVector.reduce((a, b) => a + b) / frameTimeVector.length;\n                    imageInfo.averageFrameRate = 1000 / frameTime;\n                }\n            } else if (frameIncrementPointer === 'frameTime' || frameIncrementPointer === '') {\n                frameTime = this.getFrameTime(image);\n\n                if (frameTime > 0) {\n                    imageInfo.frameIncrementPointer = frameIncrementPointer;\n                    imageInfo.frameTime = frameTime;\n                    imageInfo.averageFrameRate = 1000 / frameTime;\n                }\n            }\n\n        }\n\n        return imageInfo;\n    }\n\n    /**\n     * Get a bound reference to the provider function.\n     */\n    getProvider() {\n        let provider = this._provider;\n        if (typeof this._provider !== FUNCTION) {\n            provider = this.provider.bind(this);\n            this._provider = provider;\n        }\n\n        return provider;\n    }\n\n    /**\n     * Looks up metadata for Cornerstone Tools given a specified type and imageId\n     * A type may be, e.g. 'study', or 'patient', or 'imagePlane'. These types\n     * are keys in the stored metadata objects.\n     *\n     * @param type\n     * @param imageId\n     * @returns {Object} Relevant metadata of the specified type\n     */\n    provider(type, imageId) {\n        // TODO: Cornerstone Tools use 'imagePlaneModule', but OHIF use 'imagePlane'. It must be consistent.\n        if (type === 'imagePlaneModule') {\n            type = 'imagePlane';\n        }\n\n        const imageMetadata = this.metadataLookup.get(imageId);\n        if (!imageMetadata) {\n            return;\n        }\n\n        if (imageMetadata.hasOwnProperty(type)) {\n            return imageMetadata[type];\n        }\n    }\n}\n"]}