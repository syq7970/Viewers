)]}'
{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:design/styles/imports/theme-icons.styl","meteor://ðŸ’»app/packages/ohif:viewerbase/client/components/viewer/toolbarSectionTools/toolbarSectionTools.styl","meteor://ðŸ’»app/packages/ohif:design/styles/imports/mixins.styl","meteor://ðŸ’»app/packages/ohif:design/styles/imports/theming.styl"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAAS,aAAT;EACA,YAA8D,8DAA9D;EACA,UAAU,OAAV;EACA,aAAa,QAAb;EACA,YAAY,KAAZ;;AAEF;EACE,qBAAqB,QAArB;EACA,OAAO,KAAP;EACA,QAAQ,KAAR;;AAEF;EACE,qBAAqB,UAArB;EACA,OAAO,KAAP;EACA,QAAQ,KAAR;;AAEF;EACE,qBAAqB,WAArB;EACA,OAAO,KAAP;EACA,QAAQ,KAAR;;AAEF;EACE,qBAAqB,WAArB;EACA,OAAO,KAAP;EACA,QAAQ,KAAR;;AAEF;EACE,qBAAqB,WAArB;EACA,OAAO,KAAP;EACA,QAAQ,KAAR;;AAEF;EACE,qBAAqB,WAArB;EACA,OAAO,KAAP;EACA,QAAQ,KAAR;;AAEF;EACE,qBAAqB,WAArB;EACA,OAAO,KAAP;EACA,QAAQ,KAAR;;AC1CF;EACE,UAAU,SAAV;;AAEA;EACE,YAAY,OAAZ;ECFe,oBAAE,eAAF;EACH,iBAAE,eAAF;EACD,gBAAE,eAAF;EACD,eAAE,eAAF;EACH,YAAE,eAAF;EDAP,OAAO,IAAP;;AAGA;ECPe,mBAAE,gBAAF;EACH,gBAAE,gBAAF;EACD,eAAE,gBAAF;EACD,cAAE,gBAAF;EACH,WAAE,gBAAF;;ADMP;EACE,SAAS,EAAT;ECXa,mBAAE,wCAAF;EACH,gBAAE,wCAAF;EACD,eAAE,wCAAF;EACD,cAAE,wCAAF;EACH,WAAE,wCAAF;;ADUT;EACE,QAAU,MAAV;EACA,QAAQ,KAAR;EACA,MAAM,IAAN;EACA,WAAW,KAAX;EACA,SAAS,EAAT;EACA,aAAa,KAAb;EACA,UAAU,SAAV;ECrBe,oBAAE,yDAAF;EACH,iBAAE,yDAAF;EACD,gBAAE,yDAAF;EACD,eAAE,yDAAF;EACH,YAAE,yDAAF;EAJQ,mBAAE,4CAAF;EACH,gBAAE,4CAAF;EACD,eAAE,4CAAF;EACD,cAAE,4CAAF;EACH,WAAE,4CAAF;EDoBP,aAAa,OAAb;EACA,SAAS,EAAT;;AAEA;EC3Be,uBAAE,IAAF;EACH,oBAAE,IAAF;EACD,mBAAE,IAAF;EACD,kBAAE,IAAF;EACH,eAAE,IAAF;ED4BL,SAAS,GAAT;EACA,SAAS,MAAT;EACA,WAAW,KAAX;EACA,QAAQ,KAAR;EACA,aAAa,IAAb;EACA,YAAY,OAAZ;EACA,OAAO,KAAP;;AEWF;EACc,YAAwD,oBAAxD;;AAMN;EACc,YAAwC,oBAAxC;;AADd;EACc,YAAwC,oBAAxC;;AADd;EACc,YAAwC,oBAAxC;;AADd;EACc,YAAwC,oBAAxC;;AADd;EACc,YAAwC,oBAAxC;;AADd;EACc,YAAwC,oBAAxC;;AADd;EACc,YAAwC,oBAAxC;;AARtB;EACc,QAAwD,+BAAxD;;AAMN;EACc,QAAwC,+BAAxC;;AADd;EACc,QAAwC,gCAAxC;;AADd;EACc,QAAwC,gCAAxC;;AADd;EACc,QAAwC,8BAAxC;;AADd;EACc,QAAwC,8BAAxC;;AADd;EACc,QAAwC,8BAAxC;;AADd;EACc,QAAwC,gCAAxC;;AARtB;EACc,OAAwD,KAAxD;;AAMN;EACc,OAAwC,KAAxC;;AADd;EACc,OAAwC,KAAxC;;AADd;EACc,OAAwC,KAAxC;;AADd;EACc,OAAwC,KAAxC;;AADd;EACc,OAAwC,KAAxC;;AADd;EACc,OAAwC,KAAxC;;AADd;EACc,OAAwC,KAAxC","sourcesContent":[".theme-icon-crickets\n.theme-icon-tide\n.theme-icon-tigerlily\n.theme-icon-quartz\n.theme-icon-overcast\n.theme-icon-mint\n.theme-icon-honeycomb\n  display: inline-block\n  background: url('/packages/ohif_design/assets/theme-icons.png') no-repeat\n  overflow: hidden\n  text-indent: -9999px\n  text-align: left\n\n.theme-icon-crickets\n  background-position: -0px -0px\n  width: 64px\n  height: 56px\n\n.theme-icon-tide\n  background-position: -0px -56px\n  width: 64px\n  height: 54px\n\n.theme-icon-tigerlily\n  background-position: -0px -110px\n  width: 62px\n  height: 61px\n\n.theme-icon-quartz\n  background-position: -0px -171px\n  width: 59px\n  height: 64px\n\n.theme-icon-overcast\n  background-position: -0px -235px\n  width: 58px\n  height: 37px\n\n.theme-icon-mint\n  background-position: -0px -272px\n  width: 57px\n  height: 61px\n\n.theme-icon-honeycomb\n  background-position: -0px -333px\n  width: 50px\n  height: 58px\n","@import \"{ohif:design}/app\"\n\n$distance = 10px\n\n.toolbarSectionTools\n  position: relative\n\n  .toolbarSectionButton>.buttonLabel i.expanded-status\n    text-align: center\n    transition(all 300ms ease)\n    width: 8px\n\n  .toolbarSectionButton.expanded\n    &>.buttonLabel i.expanded-status\n      transform(rotateX(180deg))\n\n    &>.toolbarSectionDrawerContainer\n      opacity: 1\n      transform(translateX(-50%) translateY(0) scale(1))\n\n  .toolbarSectionDrawerContainer\n    bottom: - $toolbarDrawerHeight\n    height: $toolbarDrawerHeight\n    left: 50%\n    min-width: 100%\n    opacity: 0\n    padding-top: $distance\n    position: absolute\n    transition(opacity 0.3s ease\\, transform 0.3s ease\\, left 0.3s ease)\n    transform(translateX(-50%) translateY( - ($toolbarDrawerHeight + $distance)) scale(0))\n    white-space: nowrap\n    z-index: 1\n\n    .toolbarSectionDrawer\n      theme('background', '$uiGrayDarkest', 0.95)\n      theme('border', '2px solid $uiBorderColor', 0.95)\n      border-radius: 7px\n      theme('color', '$textPrimaryColor')\n      content: ''\n      display: block\n      font-size: 18px\n      height: $toolbarDrawerHeight\n      padding-top: 6px\n      text-align: center\n      width: 100%\n","/*\n    Basic mixin which vendorizes a propery. Usage:\n\n    vendorize(box-sizing, border-box)\n*/\nvendorize(property, value)\n  -webkit-{property} value\n  -moz-{property} value\n  -ms-{property} value\n  -o-{property} value\n  {property} value\n\nanimation(a)\n  vendorize(animation, a)\n\nborder-radius(r)\n  vendorize(border-radius, r)\n\nborder-top-left-radius(r)\n  vendorize(border-top-left-radius, r)\n\nborder-top-right-radius(r)\n  vendorize(border-top-right-radius, r)\n\nborder-bottom-left-radius(r)\n  vendorize(border-bottom-left-radius, r)\n\nborder-bottom-right-radius(r)\n  vendorize(border-bottom-right-radius, r)\n\nbox-shadow(s)\n  vendorize(box-shadow, s)\n\ntext-shadow(s)\n  vendorize(text-shadow, s)\n\ntransform(t)\n  vendorize(transform, t)\n\ntransform-origin(o)\n  vendorize(transform-origin, o)\n\ntransition(t)\n  vendorize(transition, t)\n\ntransition-delay(d)\n  vendorize(transition-delay, d)\n\nplaceholder-color(c)\n  &::-webkit-input-placeholder\n    color: c\n  &:-moz-placeholder\n    color: c\n  &::-moz-placeholder\n    color: c\n  &:-ms-input-placeholder\n    color: c\n","@require \"{ohif:themes}/themes\"\n\n/*\n * Process each theme variable in the given value, splitting it by space\n */\nparseSpaceVars($theme, $value, $alpha)\n    // Split values by space\n    $valueSplit = split(' ', $value)\n\n    // Create an empty list\n    $list = ''\n    pop($list)\n\n    // Iterate over split values\n    for $property in $valueSplit\n        // Try to get the theme with current property key\n        $val = $theme[$property]\n        if ($val)\n            if($val is a 'color')\n                // Apply given alpha if it's a color\n                $val = alpha($val, $alpha)\n            // Push the processed theme variable to the list\n            push($list, $val)\n        else\n            // Push the property itself if not found in theme variables\n            push($list, $property)\n\n    // Merge the resulting processed list by joining values back with space\n    join(' ', $list)\n\n/*\n * Process each theme variable in the given value, splitting it by comma\n */\nparseCommaVars($theme, $value, $alpha)\n    // Split values by comma\n    $valueSplit = split(',', $value)\n\n    // Create an empty list\n    $list = ''\n    pop($list)\n\n    // Iterate over split values\n    for $sentence in $valueSplit\n        // Procces the values splitting by space\n        push($list, parseSpaceVars($theme, $sentence, $alpha))\n\n    // Merge the resulting processed list by joining values back with comma\n    unquote(join(',', $list))\n\n/*\n * Return a processed theme variable or color with alpha\n */\ntheme($property, $value, $alpha=1)\n\n    // Crete the selector for default theme\n    / {selector()}\n        {$property}: parseCommaVars($themes[$defaultTheme], $value, $alpha)\n\n    // Create the selector for each registered theme\n    for $themeName, $theme in $themes\n        for $selectorPiece in split(',', selector())\n            // prefix the selector with the body.theme-{themeName} selector\n            / body.theme-{$themeName} {$selectorPiece}\n                {$property}: parseCommaVars($theme, $value, $alpha)\n"]}